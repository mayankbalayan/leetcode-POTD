3197. Find the Minimum Area to Cover All Ones II

  https://leetcode.com/problems/find-the-minimum-area-to-cover-all-ones-ii/description/?envType=daily-question&envId=2025-08-23


class Solution {
public:

 int minimumArea(const vector<vector<int>>& g, int si, int ei, int sj, int ej) {
        if (si > ei || sj > ej) return 0;
        int x1 = INT_MAX, y1 = INT_MAX, x2 = INT_MIN, y2 = INT_MIN;
        for (int i = max(si, 0); i <= ei; ++i)
            for (int j = max(sj, 0); j <= ej; ++j)
                if (g[i][j] == 1) {
                    x1 = min(x1, i); y1 = min(y1, j);
                    x2 = max(x2, i); y2 = max(y2, j);
                }
        return (x1 == INT_MAX) ? 0 : (x2 - x1 + 1) * (y2 - y1 + 1);
    }


    int minimumSum(vector<vector<int>>& grid) {
        const int m = grid.size();
        const int n = grid[0].size();
        int ans = m * n;

        for (int i = 0; i < m; ++i) { // top + bottom left + bottom right
            int top = minimumArea(grid, 0, i, 0, n - 1);
            for (int j = 0; j < n; ++j) {
                ans = min(ans, top
                               + minimumArea(grid, i + 1, m - 1, 0, j)
                               + minimumArea(grid, i + 1, m - 1, j + 1, n - 1));
            }
        }

        for (int i = 0; i < m; ++i) { // bottom + top left + top right
            int bottom = minimumArea(grid, i, m - 1, 0, n - 1);
            for (int j = 0; j < n; ++j) {
                ans = min(ans, bottom
                               + minimumArea(grid, 0, i - 1, 0, j)
                               + minimumArea(grid, 0, i - 1, j + 1, n - 1));
            }
        }

        for (int j = 0; j < n; ++j) { // left + right top + right bottom
            int left = minimumArea(grid, 0, m - 1, 0, j);
            for (int i = 0; i < m; ++i) {
                ans = min(ans, left
                               + minimumArea(grid, 0, i, j + 1, n - 1)
                               + minimumArea(grid, i + 1, m - 1, j + 1, n - 1));
            }
        }

        for (int j = 0; j < n; ++j) { // right + left top + left bottom
            int right = minimumArea(grid, 0, m - 1, j, n - 1);
            for (int i = 0; i < m; ++i) {
                ans = min(ans, right
                               + minimumArea(grid, 0, i, 0, j - 1)
                               + minimumArea(grid, i + 1, m - 1, 0, j - 1));
            }
        }

        // Three horizontal strips.
        for (int i1 = 0; i1 < m; ++i1)
            for (int i2 = i1 + 1; i2 < m; ++i2)
                ans = min(ans,
                          minimumArea(grid, 0, i1, 0, n - 1) +
                          minimumArea(grid, i1 + 1, i2, 0, n - 1) +
                          minimumArea(grid, i2 + 1, m - 1, 0, n - 1));

        // Three vertical strips.
        for (int j1 = 0; j1 < n; ++j1)
            for (int j2 = j1 + 1; j2 < n; ++j2)
                ans = min(ans,
                          minimumArea(grid, 0, m - 1, 0, j1) +
                          minimumArea(grid, 0, m - 1, j1 + 1, j2) +
                          minimumArea(grid, 0, m - 1, j2 + 1, n - 1));

        return ans;
    }
};
