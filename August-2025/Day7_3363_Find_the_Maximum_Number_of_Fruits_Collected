3363. Find the Maximum Number of Fruits Collected

Leetcode Link:- https://leetcode.com/problems/find-the-maximum-number-of-fruits-collected/description/?envType=daily-question&envId=2025-08-07

class Solution {
public:
// top down (memoization ) approach 
    int n ;
    int child1collect(vector<vector<int>>& fruits){
        int count =0;
        for(int i=0; i<n; i++){
            count += fruits[i][i];
        }
        // got sum of all child 1 fruits collected
        return count;
    }

    int child2collect(int i , int j , vector<vector<int>>& fruits,vector<vector<int>> &dp){
        // base case
    if(i>=n || j<0 || j>=n){
        return 0;
    }

    if(i==n-1 && j==n-1){
        return 0; // because n-1 is already collected by child 1
    }

    if(i==j || i>j){
        return 0; // daigonal child 1 taken upper side of daigonal child 3
    }

    if(dp[i][j]!=-1){
        return dp[i][j];
    }

    int bottomleft = fruits[i][j] + child2collect(i+1,j-1,fruits,dp);
    int bottomdown = fruits[i][j] + child2collect(i+1,j,fruits,dp);
    int bottomright = fruits[i][j] + child2collect(i+1,j+1,fruits,dp);

    return dp[i][j] = max({bottomleft,bottomdown,bottomright});
    }



     int child3collect(int i , int j , vector<vector<int>>& fruits,vector<vector<int>> &dp){
        // base case
    if(i>=n || j<0 || j>=n){
        return 0;
    }

    if(i==n-1 && j==n-1){
        return 0; // because n-1 is already collected by child 1
    }
    
    if(i==j || i<j){
        return 0; // daigonal child 1 taken upper side of daigonal child 2
    }

    if(dp[i][j]!=-1){
        return dp[i][j];
    }

    int upright = fruits[i][j] + child3collect(i-1,j+1,fruits,dp);
    int right = fruits[i][j] + child3collect(i,j+1,fruits,dp);
    int bottomright = fruits[i][j] + child3collect(i+1,j+1,fruits,dp);

    return dp[i][j] =  max({upright,right,bottomright});

    }


    int maxCollectedFruits(vector<vector<int>>& fruits) {
        n = fruits.size();
        vector<vector<int>>dp(n,vector<int>(n,-1));
        int c1 = child1collect(fruits);
         // child 2 start and end coordinate 0,n-1
        int c2 = child2collect(0,n-1,fruits,dp);
        
        int c3 = child3collect(n-1,0,fruits,dp);

        return c1+c2+c3;
    }
};

